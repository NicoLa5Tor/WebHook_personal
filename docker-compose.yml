
networks:
  redis_network:

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - VERIFY_TOKEN=${VERIFY_TOKEN}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - PHONE_NUMBER_ID=${PHONE_NUMBER_ID}
      - VERSION=${VERSION}
      - BASE_URL=${BASE_URL}
      - DEBUG=${DEBUG}
      - REDIS_URL=redis://redis:6379/0
      - WEBSOCKET_URL=${WEBSOCKET_URL}
      - WEBHOOK_PORT=5050
      - CACHE_DB_PATH=/app/data/cache.db
      - CACHE_CLEANUP_INTERVAL=${CACHE_CLEANUP_INTERVAL}
      - BULK_MAX_WORKERS=${BULK_MAX_WORKERS}
    ports:
      - "5050:5050"
    volumes:
      - sqlite_data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - VERIFY_TOKEN=${VERIFY_TOKEN}
      - ACCESS_TOKEN=${ACCESS_TOKEN}
      - PHONE_NUMBER_ID=${PHONE_NUMBER_ID}
      - VERSION=${VERSION}
      - BASE_URL=${BASE_URL}
      - DEBUG=${DEBUG}
      - REDIS_URL=redis://redis:6379/0
      - CACHE_DB_PATH=/app/data/cache.db
      - CACHE_CLEANUP_INTERVAL=${CACHE_CLEANUP_INTERVAL}
      - BULK_MAX_WORKERS=${BULK_MAX_WORKERS}
    volumes:
      - sqlite_data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - redis_network
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  sqlite_data:
    driver: local
  redis_data:
    driver: local

